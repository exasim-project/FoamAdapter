# SPDX-FileCopyrightText: 2023 - 2025 NeoN authors
#
# SPDX-License-Identifier: Unlicense

# Available GPUs and corresponding Docker images
.use-nvidia-gpu:
  tags: ["nvidia-h100-gpus"]
  image: chihtaw/cuda-openfoam:v2412

.use-amd-gpu:
  tags: ["amd-gpus"]
  image: chihtaw/rocm-v6.4.1-openfoam:v2412

# Job rules to determine if the pipeline was triggered from FoamAdapter or NeoN CI
.trigger-from-foamadapter:
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $NEON_BRANCH == null
      when: always

    - when: never

.trigger-from-neon:
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $NEON_BRANCH != null
      when: always

    - when: never

# Common OpenFOAM environment variables
variables:
  FOAM_INST_DIR: /usr/local/app/openfoam
  WM_PROJECT: OpenFOAM
  WM_PROJECT_VERSION: v2412
  WM_OPTIONS: linux64GccDPInt32Opt
  WM_COMPILER_TYPE: system
  WM_COMPILER: Gcc
  WM_PRECISION_OPTION: DP
  WM_LABEL_SIZE: 32
  WM_COMPILE_OPTION: Opt
  WM_OSTYPE: POSIX
  WM_ARCH: linux64
  WM_ARCH_OPTION: 64
  WM_LINK_LANGUAGE: c++
  WM_LABEL_OPTION: Int32
  WM_MPLIB: SYSTEMOPENMPI
  MPI_BUFFER_SIZE: 20000000

  # Derived OpenFOAM environment paths
  FOAM_ETC: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION/etc"
  FOAM_SRC: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION/src"
  FOAM_LIBBIN: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION/platforms/$WM_OPTIONS/lib"
  FOAM_APPBIN: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION/platforms/$WM_OPTIONS/bin"
  WM_PROJECT_DIR: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION"

# Common before_script steps for building FoamAdapter
.build-foamadapter-common:
  before_script:
    # Add OpenFOAM executables to PATH
    - export PATH="$FOAM_APPBIN:$PATH"

    # Detect MPI subdirectory containing libPstream.so
    - export FOAM_MPI=$(basename $(dirname $(find $FOAM_LIBBIN -name libPstream.so | head -n1)))
    - echo "Detected FOAM_MPI=$FOAM_MPI"

    # Add OpenFOAM libraries to build and runtime paths
    - export LD_LIBRARY_PATH="$FOAM_LIBBIN:$FOAM_LIBBIN/$FOAM_MPI:$LD_LIBRARY_PATH"
    - export CMAKE_LIBRARY_PATH="$FOAM_LIBBIN:$FOAM_LIBBIN/$FOAM_MPI:$CMAKE_LIBRARY_PATH"

    # Set man path
    - export MANPATH="$FOAM_ETC/man:$MANPATH"

    # Debugging info
    - echo "PATH=$PATH"
    - echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
    - echo "CMAKE_LIBRARY_PATH=$CMAKE_LIBRARY_PATH"
    - which simpleFoam || echo "simpleFoam not found!"
    - find $FOAM_LIBBIN -name "libPstream.so"

    # Show tool versions for debugging
    - cmake --version
    - clang++ --version || g++ --version

# Build and test FoamAdapter with the main branch of NeoN
build-and-test-with-neon-main-nvidia:
  extends:
    - .build-foamadapter-common
    - .use-nvidia-gpu
    - .trigger-from-foamadapter
  script:
    - ./ci/build-and-test.sh nvidia

build-and-test-with-neon-main-amd:
  extends:
    - .build-foamadapter-common
    - .use-amd-gpu
    - .trigger-from-foamadapter
  script:
    - ./ci/build-and-test.sh amd

# Build and test FoamAdapter with a feature branch of NeoN
build-and-test-with-neon-feature-nvidia:
  extends:
    - .build-foamadapter-common
    - .use-nvidia-gpu
    - .trigger-from-neon
  script:
    - ./ci/build-and-test.sh nvidia $NEON_BRANCH

build-and-test-with-neon-feature-amd:
  extends:
    - .build-foamadapter-common
    - .use-amd-gpu
    - .trigger-from-neon
  script:
    - ./ci/build-and-test.sh amd $NEON_BRANCH