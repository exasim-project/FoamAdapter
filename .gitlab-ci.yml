# SPDX-FileCopyrightText: 2023 - 2025 NeoN authors
#
# SPDX-License-Identifier: Unlicense
image: chihtaw/cuda-openfoam:v2412

stages:
  - build-and-test

variables:
  FOAM_INST_DIR: /usr/local/app/openfoam
  WM_PROJECT: OpenFOAM
  WM_PROJECT_VERSION: v2412
  WM_OPTIONS: linux64GccDPInt32Opt
  WM_COMPILER_TYPE: system
  WM_COMPILER: Gcc
  WM_PRECISION_OPTION: DP
  WM_LABEL_SIZE: 32
  WM_COMPILE_OPTION: Opt
  WM_OSTYPE: POSIX
  WM_ARCH: linux64
  WM_ARCH_OPTION: 64
  WM_LINK_LANGUAGE: c++
  WM_LABEL_OPTION: Int32
  WM_MPLIB: SYSTEMOPENMPI
  MPI_BUFFER_SIZE: 20000000

  # Derived OpenFOAM environment paths
  FOAM_ETC: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION/etc"
  FOAM_SRC: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION/src"
  FOAM_LIBBIN: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION/platforms/$WM_OPTIONS/lib"
  FOAM_APPBIN: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION/platforms/$WM_OPTIONS/bin"
  WM_PROJECT_DIR: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION"

.build-foamadapter-common: &build-foamadapter-common
  stage: build-and-test
  tags: ["nvidia-h100-gpus"]
  before_script:
    # Add OpenFOAM executables to PATH
    - export PATH="$FOAM_APPBIN:$PATH"

    # Detect MPI subdirectory containing libPstream.so
    - export FOAM_MPI=$(basename $(dirname $(find $FOAM_LIBBIN -name libPstream.so | head -n1)))
    - echo "Detected FOAM_MPI=$FOAM_MPI"

    # Add OpenFOAM libraries to build and runtime paths
    - export LD_LIBRARY_PATH="$FOAM_LIBBIN:$FOAM_LIBBIN/$FOAM_MPI:$LD_LIBRARY_PATH"
    - export CMAKE_LIBRARY_PATH="$FOAM_LIBBIN:$FOAM_LIBBIN/$FOAM_MPI:$CMAKE_LIBRARY_PATH"

    # Set man path
    - export MANPATH="$FOAM_ETC/man:$MANPATH"

    # Debugging info
    - echo "PATH=$PATH"
    - echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
    - echo "CMAKE_LIBRARY_PATH=$CMAKE_LIBRARY_PATH"
    - which simpleFoam || echo "simpleFoam not found!"
    - find $FOAM_LIBBIN -name "libPstream.so"

    # Show tool versions for debugging
    - cmake --version
    - clang++ --version || g++ --version
    - nvidia-smi
    - nvcc --version

build-and-test-foamadapter-with-neon-main:
  <<: *build-foamadapter-common
  rules:
    # Run only when triggered via API from FoamAdapter GitHub CI
    - if: '$CI_PIPELINE_SOURCE == "trigger" && !NEON_COMMIT && !NEON_BRANCH'
      when: always
    # Skip in all other cases
    - when: never

  script:
    # -------------------------
    # Step 1: Prepare NeoN
    # -------------------------
    - echo "Default FoamAdapter CI pipeline => Use NeoN branch=main"
    - git clone --depth 1 --branch main https://gitlab-ce.lrz.de/greole/neon.git ../NeoN
    # -------------------------
    # Step 2: Build FoamAdapter
    # -------------------------
    - echo "Building FoamAdapter against NeoN..."
    - cmake --preset develop -DFOAMADAPTER_NEON_DIR=../NeoN -DCMAKE_CUDA_ARCHITECTURES=90 -DNeoN_WITH_THREADS=OFF -DFOAMADAPTER_BUILD_BENCHMARKS=OFF
    - cmake --build --preset develop
    # -------------------------
    # Step 3: Run Tests
    # -------------------------
    - echo "Running FoamAdapter tests..."
    - ctest --preset develop --output-on-failure


build-and-test-foamadapter-with-neon-features:
  <<: *build-foamadapter-common
  rules:
    # Run only when triggered via API from NeoN GitHub CI
    - if: '$CI_PIPELINE_SOURCE == "trigger" && NEON_COMMIT && NEON_BRANCH'
      when: always
    # Skip in all other cases
    - when: never

  script:
    # ----------------------------------
    # Step 0: Select FoamAdapter branch
    # ----------------------------------
    - |
      echo "NeoN triggered with branch=$NEON_BRANCH commit=$NEON_COMMIT"
      # Default branch fallback
      FOAMADAPTER_BRANCH="main"

      if [ -n "$NEON_BRANCH" ]; then
        echo "Checking if FoamAdapter branch $NEON_BRANCH exists..."
        if git ls-remote --exit-code --heads origin "$NEON_BRANCH"; then
          FOAMADAPTER_BRANCH="$NEON_BRANCH"
          echo "Found matching FoamAdapter branch: $FOAMADAPTER_BRANCH"
        else
          echo "No matching branch, falling back to main"
        fi
      fi

      echo "Using FoamAdapter branch: $FOAMADAPTER_BRANCH"

      # Switch to that branch
      git fetch origin "$FOAMADAPTER_BRANCH"
      git checkout "$FOAMADAPTER_BRANCH"
    # -------------------------
    # Step 1: Prepare NeoN
    # -------------------------
    - echo "Triggered by NeoN CI pipeline => Use NeoN branch=$NEON_BRANCH commit=$NEON_COMMIT"
    - |
      if [ -n "$NEON_COMMIT" ]; then
        git clone https://gitlab-ce.lrz.de/greole/neon.git ../NeoN
        cd ../NeoN
        git fetch origin $NEON_COMMIT --depth 1
        git checkout $NEON_COMMIT
        cd -
      else
        git clone --depth 1 --branch ${NEON_BRANCH:-main} https://gitlab-ce.lrz.de/greole/neon.git ../NeoN
      fi
    # -------------------------
    # Step 2: Build FoamAdapter
    # -------------------------
    - echo "Building FoamAdapter against NeoN..."
    - cmake --preset develop -DFOAMADAPTER_NEON_DIR=../NeoN -DCMAKE_CUDA_ARCHITECTURES=90 -DNeoN_WITH_THREADS=OFF
    - cmake --build --preset develop
    # -------------------------
    # Step 3: Run Tests
    # -------------------------
    - echo "Running FoamAdapter tests..."
    - ctest --preset develop --output-on-failure
