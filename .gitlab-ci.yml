# SPDX-FileCopyrightText: 2023 - 2025 NeoN authors
#
# SPDX-License-Identifier: Unlicense

# Available GPUs and corresponding Docker images
.use-nvidia-gpu-and-image:
  tags: ["nvidia-h100-gpus"]
  image: chihtaw/cuda-openfoam-ginkgo:arch_90-v2412
  variables:
    PYTHONPATH: /root/.local/:/root/.local/lib/:/root/.local/lib/python3.12:/root/.local/lib/python3.12/site-packages
    FOAM_INST_DIR: /usr/local/app/openfoam
    WM_PROJECT_VERSION: v2412

.use-amd-gpu-and-image:
  tags: ["amd-gpus"]
  image: chihtaw/rocm-openfoam-ginkgo:arch_gfx90a-6.4.1-v2412
  variables:
    PYTHONPATH: /root/.local/:/root/.local/lib/:/root/.local/lib/python3.12:/root/.local/lib/python3.12/site-packages
    FOAM_INST_DIR: /workspace/openfoam
    WM_PROJECT_VERSION: v2412

# Common OpenFOAM environment variables
.openfoam-env-setup:
  variables:
    WM_PROJECT: OpenFOAM
    WM_OPTIONS: linux64GccDPInt32Opt
    WM_COMPILER_TYPE: system
    WM_COMPILER: Gcc
    WM_PRECISION_OPTION: DP
    WM_LABEL_SIZE: 32
    WM_COMPILE_OPTION: Opt
    WM_OSTYPE: POSIX
    WM_ARCH: linux64
    WM_ARCH_OPTION: 64
    WM_LINK_LANGUAGE: c++
    WM_LABEL_OPTION: Int32
    WM_MPLIB: SYSTEMOPENMPI
    MPI_BUFFER_SIZE: 20000000

    # Derived OpenFOAM environment paths
    FOAM_ETC: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION/etc"
    FOAM_SRC: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION/src"
    FOAM_LIBBIN: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION/platforms/$WM_OPTIONS/lib"
    FOAM_APPBIN: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION/platforms/$WM_OPTIONS/bin"
    WM_PROJECT_DIR: "$FOAM_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION"

  before_script:
    # Add OpenFOAM executables to PATH
    - export PATH="$FOAM_APPBIN:$PATH"

    # Detect MPI subdirectory containing libPstream.so
    - export FOAM_MPI=$(basename $(dirname $(find $FOAM_LIBBIN -name libPstream.so | head -n1)))
    - echo "Detected FOAM_MPI=$FOAM_MPI"

    # Add OpenFOAM libraries to build and runtime paths
    - export LD_LIBRARY_PATH="$FOAM_LIBBIN:$FOAM_LIBBIN/$FOAM_MPI:$LD_LIBRARY_PATH"
    - export CMAKE_LIBRARY_PATH="$FOAM_LIBBIN:$FOAM_LIBBIN/$FOAM_MPI:$CMAKE_LIBRARY_PATH"

    # Set man path
    - export MANPATH="$FOAM_ETC/man:$MANPATH"

    # Debugging info
    - echo "PATH=$PATH"
    - echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
    - echo "CMAKE_LIBRARY_PATH=$CMAKE_LIBRARY_PATH"
    - which simpleFoam || echo "simpleFoam not found!"
    - find $FOAM_LIBBIN -name "libPstream.so"

# Job rules to determine if the pipeline was triggered from FoamAdapter or NeoN CI
.trigger-from-foamadapter-for-testing:
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $NEON_BRANCH == null && $BENCHMARK != "true"
      when: always
    - when: never

.trigger-from-neon-for-testing:
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $NEON_BRANCH != null && $BENCHMARK != "true"
      when: always
    - when: never

.trigger-from-foamadapter-for-benchmarking:
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" && $NEON_BRANCH == null && $BENCHMARK == "true"
      when: always
    - when: never
  variables:
    RESULTS_DIR: "benchmark-results"
    RUN_IDENTIFIER: "${CI_PIPELINE_ID}"
    REPO_NAME: "NeoFOAM-BenchmarkData"
    TARGET_REPO: "github.com/exasim-project/${REPO_NAME}.git"
    TARGET_BRANCH: "ci-benchmarks"
    TARGET_RESULTS_DIR: "NeoFOAM/${RUN_IDENTIFIER}/${CI_RUNNER_DESCRIPTION}"

# --- Build and test FoamAdapter with the main branch of NeoN ---
build-and-test-with-neon-main-nvidia:
  extends:
    - .use-nvidia-gpu-and-image
    - .openfoam-env-setup
    - .trigger-from-foamadapter-for-testing
  script:
    - ./ci/lrz-gitlab/build-and-test.sh nvidia

build-and-test-with-neon-main-amd:
  extends:
    - .use-amd-gpu-and-image
    - .openfoam-env-setup
    - .trigger-from-foamadapter-for-testing
  script:
    - ./ci/lrz-gitlab/build-and-test.sh amd

# --- Benchmark FoamAdapter with the main branch of NeoN ---
benchmark-with-neon-main-nvidia:
  extends:
    - .use-nvidia-gpu-and-image
    - .openfoam-env-setup
    - .trigger-from-foamadapter-for-benchmarking
  script:
    - ./ci/lrz-gitlab/benchmark.sh nvidia main profiling

benchmark-with-neon-main-amd:
  extends:
    - .use-amd-gpu-and-image
    - .openfoam-env-setup
    - .trigger-from-foamadapter-for-benchmarking
  script:
    - export PATH=$PATH:$PWD/build/profiling/bin/benchmarks
    - ./ci/lrz-gitlab/benchmark.sh amd main profiling

# --- Build and test FoamAdapter with a feature branch of NeoN ---
build-and-test-with-neon-feature-nvidia:
  extends:
    - .use-nvidia-gpu-and-image
    - .openfoam-env-setup
    - .trigger-from-neon-for-testing
  script:
    - ./ci/lrz-gitlab/build-and-test.sh nvidia $NEON_BRANCH

build-and-test-with-neon-feature-amd:
  extends:
    - .use-amd-gpu-and-image
    - .openfoam-env-setup
    - .trigger-from-neon-for-testing
  script:
    - ./ci/lrz-gitlab/build-and-test.sh amd $NEON_BRANCH
