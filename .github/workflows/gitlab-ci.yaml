name: LRZ GitLab CI

on:
  push:
    branches: [dev, main]
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  schedule:
    - cron: '00 8 * * 0'  # Runs at 10 AM CEST (08:00 UTC) every Sunday
  workflow_dispatch:      # Optional: allows manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  trigger-lrz-ci:
    name: Trigger and run CI on GPU (${{ github.event.repository.name }})
    runs-on: ubuntu-latest
    timeout-minutes: 1440   # 24 hours max runtime

    # Skip if PR has Skip-build label
    if: "!contains(toJson(github.event.pull_request.labels.*.name), 'Skip-build')"

    env:
      LRZ_GROUP: greole
      LRZ_HOST: gitlab-ce.lrz.de
      REPO_NAME: ${{ github.event.repository.name }}
      MAX_WAIT_MINUTES: 1440  # 24 hours

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine branch
        id: branch
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request"* ]]; then
            BRANCH="$GITHUB_HEAD_REF"
          else
            BRANCH=${GITHUB_REF_NAME#refs/heads/}
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Push commit to LRZ GitLab
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote add lrz https://oauth2:${{ secrets.GITLAB_PROJECT_TOKEN }}@${{ env.LRZ_HOST }}/${{ env.LRZ_GROUP }}/${{ env.REPO_NAME }}.git
          git fetch origin ${{ steps.branch.outputs.branch }}
          git checkout -B ${{ steps.branch.outputs.branch }} origin/${{ steps.branch.outputs.branch }}
          git reset --hard origin/${{ steps.branch.outputs.branch }}
          git push --force lrz HEAD:refs/heads/${{ steps.branch.outputs.branch }}

      - name: Cancel running/pending LRZ GitLab CI pipelines (only when NEON_BRANCH=null)
        run: |
          BRANCH=${{ steps.branch.outputs.branch }}
          echo "Checking running/pending CI pipelines for branch $BRANCH"

          response=$(curl -s -w "%{http_code}" -o response.json \
            --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_PROJECT_TOKEN }}" \
            "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.REPO_NAME }}/pipelines?ref=$BRANCH&order_by=id&sort=desc")
          http_code="${response:(-3)}"

          if [[ "$http_code" != "200" ]]; then
            echo "GitLab API request failed with HTTP status $http_code"
            cat response.json
            exit 1
          fi

          if ! jq -e 'type=="array"' response.json >/dev/null 2>&1; then
            echo "Unexpected response from GitLab API (not a JSON array)"
            cat response.json
            exit 1
          fi

          pipeline_ids=$(jq -r '.[] | select(.status=="running" or .status=="pending") | .id' response.json)
          if [ -z "$pipeline_ids" ]; then
            echo "No running/pending CI pipelines to check"
          else
            for id in $pipeline_ids; do
              echo "Checking pipeline $id for NEON_BRANCH"
              vars=$(curl -s \
                --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_PROJECT_TOKEN }}" \
                "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.REPO_NAME }}/pipelines/$id/variables")

              neon_branch=$(echo "$vars" | jq -r '.[] | select(.key=="NEON_BRANCH") | .value' || true)

              if [ "$neon_branch" == "null" ]; then
                echo "Canceling pipeline $id (NEON_BRANCH is null)"
                curl -s --request POST \
                 --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_PROJECT_TOKEN }}" \
                 "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.REPO_NAME }}/pipelines/$id/cancel"
              else
               echo "Keeping pipeline $id (NEON_BRANCH=$neon_branch)"
              fi
           done
          fi

      - name: Trigger LRZ GitLab CI pipeline
        id: trigger
        run: |
          BRANCH=${{ steps.branch.outputs.branch }}
          echo "Triggering new CI pipeline on branch $BRANCH"

          response=$(curl -s --request POST \
            --form "token=${{ secrets.LRZ_GITLAB_TRIGGER_TOKEN }}" \
            --form "ref=$BRANCH" \
            "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.REPO_NAME }}/trigger/pipeline")

          echo "$response" | jq .
          pipeline_id=$(echo "$response" | jq -r '.id')
          if [ "$pipeline_id" = "null" ] || [ -z "$pipeline_id" ]; then
            echo "Failed to trigger LRZ CI pipeline"
            exit 1
          fi

          echo "pipeline_id=$pipeline_id" >> $GITHUB_OUTPUT

      - name: Wait for LRZ GitLab CI pipeline
        run: |
          wait_pipeline() {
            local PROJECT=$1
            local PIPELINE_ID=$2
            local SUCCESS_STATUSES=("success")
            local FAILURE_STATUSES=("failed" "canceled" "skipped")

            # Construct pipeline URL
            local pipeline_url="https://${{ env.LRZ_HOST }}/${{ env.LRZ_GROUP }}/$PROJECT/-/pipelines/$PIPELINE_ID"

            # Print clickable link in logs
            echo "Monitoring LRZ GitLab CI pipeline: $pipeline_url"

            for i in $(seq 1 $MAX_WAIT_MINUTES); do
              status=$(curl -s \
               --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_PROJECT_TOKEN }}" \
               "https://${{ env.LRZ_HOST }}/api/v4/projects/${{ env.LRZ_GROUP }}%2F${{ env.REPO_NAME }}/pipelines/$PIPELINE_ID" \
                | jq -r '.status')

              echo "[$i] $PROJECT pipeline status: $status"

             case "$status" in
               ${SUCCESS_STATUSES[*]})
                  echo "$PROJECT CI pipeline succeeded"
                 return 0
                 ;;
                ${FAILURE_STATUSES[*]})
                 echo "$PROJECT CI pipeline finished with status: $status"
                 return 1
                  ;;
              esac
              sleep 60
            done

            echo "Timed out after $MAX_WAIT_MINUTES minutes waiting for $PROJECT CI pipeline"
            return 1
          }

          wait_pipeline "${{ env.REPO_NAME }}" "${{ steps.trigger.outputs.pipeline_id }}"
