name: LRZ GitLab CI

on:
  push:
    branches: [dev, main]
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  schedule:
    - cron: '00 8 * * 0'  # Runs at 10 AM CEST (08:00 UTC) every Sunday
  workflow_dispatch:      # Optional: allows manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Trigger and run CI on GPU (${{ github.event.repository.name }})
    runs-on: ubuntu-latest
    timeout-minutes: 1440 # 24 hours

    # Only run if the 'Skip-build' label is not present on a PR
    if: "!contains(toJson(github.event.pull_request.labels.*.name), 'Skip-build')"

    env:
      LRZ_GROUP: greole
      LRZ_HOST: gitlab-ce.lrz.de
      REPO_NAME: ${{ github.event.repository.name }}
      MAX_WAIT_MINUTES: 1440
      LRZ_GITLAB_PROJECT_TOKEN: ${{ secrets.GITLAB_PROJECT_TOKEN }}
      LRZ_GITLAB_TRIGGER_TOKEN: ${{ secrets.LRZ_GITLAB_TRIGGER_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine branch
        id: branch
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request"* ]]; then
            BRANCH="$GITHUB_HEAD_REF"
          else
            BRANCH=${GITHUB_REF_NAME#refs/heads/}
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Push commit to LRZ GitLab
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote add lrz https://oauth2:${LRZ_GITLAB_PROJECT_TOKEN}@${LRZ_HOST}/${LRZ_GROUP}/${REPO_NAME}.git
          git fetch origin ${{ steps.branch.outputs.branch }}
          git checkout -B ${{ steps.branch.outputs.branch }} origin/${{ steps.branch.outputs.branch }}
          git reset --hard origin/${{ steps.branch.outputs.branch }}
          git push --force lrz HEAD:refs/heads/${{ steps.branch.outputs.branch }}

      - name: Cancel running/pending LRZ GitLab CI pipelines
        run: |
          ./cancel_gitlab_pipelines.sh ${{ steps.branch.outputs.branch }}

      - name: Trigger LRZ GitLab CI pipeline
        id: trigger
        run: |
          BRANCH=${{ steps.branch.outputs.branch }}
          echo "Triggering new CI pipeline on branch $BRANCH"

          response=$(curl -s --request POST \
            --form "token=${LRZ_GITLAB_TRIGGER_TOKEN}" \
            --form "ref=$BRANCH" \
            "https://${LRZ_HOST}/api/v4/projects/${LRZ_GROUP}%2F${REPO_NAME}/trigger/pipeline")

          echo "$response" | jq .
          pipeline_id=$(echo "$response" | jq -r '.id')
          if [ "$pipeline_id" = "null" ] || [ -z "$pipeline_id" ]; then
            echo "Failed to trigger LRZ CI pipeline"
            exit 1
          fi

          echo "pipeline_id=$pipeline_id" >> $GITHUB_OUTPUT

      - name: Wait for LRZ GitLab CI pipeline
        run: |
          set -euo pipefail

          PIPELINE_ID="${{ steps.trigger.outputs.pipeline_id }}"

          # Construct pipeline URL
          pipeline_url="https://${LRZ_HOST}/${LRZ_GROUP}/${REPO_NAME}/-/pipelines/${PIPELINE_ID}"
          echo "Monitoring LRZ GitLab CI pipeline: $pipeline_url"

          for i in $(seq 1 "${MAX_WAIT_MINUTES}"); do
            status=$(curl -s \
             --header "PRIVATE-TOKEN: ${LRZ_GITLAB_PROJECT_TOKEN}" \
              "https://${LRZ_HOST}/api/v4/projects/${LRZ_GROUP}%2F${REPO_NAME}/pipelines/${PIPELINE_ID}" \
             | jq -r '.status')

            echo "[$i] $REPO_NAME pipeline status: $status"

            case "$status" in
              success)
                echo "$REPO_NAME CI pipeline succeeded"
                exit 0
                ;;
              failed|canceled|skipped)
              echo "$REPO_NAME CI pipeline finished with status: $status"
              exit 1
              ;;
            esac

            sleep 60
          done

          echo "Timed out after $MAX_WAIT minutes waiting for $REPO_NAME CI pipeline"
          exit 1
